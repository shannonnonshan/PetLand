<div class="h-screen w-full flex justify-center bg-gray-100">
  <div class="w-full mx-5 mt-3 bg-white p-8 rounded-lg shadow-md">
    <h2 class="text-3xl font-semibold text-left text-gray-800 mb-6">Create New Staff</h2>
    <form id="frmCreate" class="space-y-6" method="POST" action="/owner/createStaff">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
        <div>
          <label for="txtFullName" class="block text-sm font-bold text-gray-700 mb-1">Full Name</label>
          <input id="txtFullName" type="text" placeholder="Full Name" name="name"
            class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
        <div>
          <label for="txtUsername" class="block text-sm font-bold text-gray-700 mb-1">Username</label>
          <input id="txtUsername" type="text" name="username" placeholder="Username"
            class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
      </div>


      <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
        <div>
          <label for="txtPassword" class="block text-sm font-bold text-gray-700 mb-1">Password</label>
          <input id="txtPassword" type="password" placeholder="********" name="raw_password"
            class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
            <small id="passwordError" style="color: red; display: none;"></small>
        </div>
        <div>
          <label for="txtConfirmPassword" class="block text-sm font-bold text-gray-700 mb-1">Confirm Password</label>
          <input id="txtConfirmPassword" type="password" placeholder="********"
            class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
            <small id="confirmPasswordError" style="color: red; display: none;"></small>
        </div>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
        <div>
            <label for="txtEmail" class="block text-sm font-bold text-gray-700 mb-1">Email</label>
            <input id="txtEmail" placeholder="dtt@gmail.com" name="email"
            class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
        <div>
            <label for="txtPhone" class="block text-sm font-bold text-gray-700 mb-1">Phone</label>
            <input id="txtPhone" placeholder="077-777-7878" name="phone"
            class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
      </div>  
     <div>
  <label class="block text-sm font-bold text-gray-700 mb-2">Gender</label>
  <div class="flex items-center space-x-6">
    <label class="inline-flex items-center">
      <input type="radio" name="gender" value="Male" class="form-radio text-blue-600" />
      <span class="ml-2 text-gray-700">Male</span>
    </label>
    <label class="inline-flex items-center">
      <input type="radio" name="gender" value="Female" class="form-radio text-blue-600" />
      <span class="ml-2 text-gray-700">Female</span>
    </label>
    <label class="inline-flex items-center">
      <input type="radio" name="gender" value="none" class="form-radio text-blue-600" />
      <span class="ml-2 text-gray-700">Prefer not to say</span>
    </label>
  </div>
</div>
      <button type="submit"
        class="w-full py-2 bg-yellow-300 text-white font-semibold rounded-full hover:bg-yellow-400">
        Submit
      </button>
    </form>
  </div>
</div>
{{#section "js"}}
<script>
  function validatePasswordField() {
      const password = document.querySelector('#txtPassword').value;
      const errorField = document.querySelector('#passwordError');
      const minLength = 8;
      const hasUpper = /[A-Z]/.test(password);
      const hasLower = /[a-z]/.test(password);
      const hasNumber = /[0-9]/.test(password);
      const hasSpecialChar = /[!@#\$%\^\&*\)\(+=._-]/.test(password);

      if (password.length < minLength) {
          errorField.textContent = 'Password must be at least 8 characters long.';
          errorField.style.display = 'block';
      } else if (!hasUpper || !hasLower || !hasNumber || !hasSpecialChar) {
          errorField.textContent = 'Password must include uppercase, lowercase, number, and special character.';
          errorField.style.display = 'block';
      } else {
          errorField.textContent = '';
          errorField.style.display = 'none';
      }
  }

  function validateConfirmPasswordField() {
      const password = document.querySelector('#txtPassword').value;
      const confirmPassword = document.querySelector('#txtConfirmPassword').value;
      const confirmError = document.querySelector('#confirmPasswordError');

      if (confirmPassword !== password) {
          confirmError.textContent = 'Passwords do not match.';
          confirmError.style.display = 'block';
      } else {
          confirmError.textContent = '';
          confirmError.style.display = 'none';
      }
  }

  document.querySelector('#txtPassword').addEventListener('input', validatePasswordField);
  document.querySelector('#txtPassword').addEventListener('blur', validatePasswordField);
  document.querySelector('#txtConfirmPassword').addEventListener('input', validateConfirmPasswordField);
  document.querySelector('#txtConfirmPassword').addEventListener('blur', validateConfirmPasswordField);
</script>

<script>

    function checkValidEmail() {
        const email = document.querySelector('#txtEmail').value;
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Định dạng cơ bản cho email
        if (email.length === 0 || !emailRegex.test(email)) {
            document.querySelector('#txtEmail').select();
            return false; 
        }
        return true; 
    }
    function checkValidPassword(){
       
        const password = document.querySelector('#txtPassword').value;

        const minLength = 8;
        const hasUpper = /[A-Z]/.test(password);
        const hasLower = /[a-z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSpecialChar = /[!@#\$%\^\&*\)\(+=._-]/.test(password);

        if (password.length < minLength) {
            Swal.fire({
                title: 'Warning',
                text: "Password must be at least 8 characters long.",
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            document.querySelector('#txtPassword').select();
            return false;
        }

        if (!hasUpper || !hasLower || !hasNumber || !hasSpecialChar) {
            Swal.fire({
                title: 'Warning',
                text: "Password must include uppercase, lowercase, number, and special character.",
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            document.querySelector('#txtPassword').select();
            return false;
        }

        return true;
    }
    $('#frmCreate').on('submit', function (e) {
        e.preventDefault();
        const username = $('#txtUsername').val();
        const password = $('#txtPassword').val();
        const confirmPassword = $('#txtConfirmPassword').val();

        if(!checkValidPassword()){
            return;
        }
        if (password !== confirmPassword) {
            Swal.fire({
                title: 'Error',
                text: "Passwords do not match. Please re-enter.",
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }
        
        // Kiểm tra tên người dùng
        if (username.length === 0) {
            Swal.fire({
                title: 'Warning',
                text: "Username cannot be empty. Please provide a valid username.",
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!checkValidEmail()) {
            Swal.fire({
                title: 'Error',
                text: "Invalid email format. Please provide a valid email.",
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }
        
        // Kiểm tra username khả dụng qua AJAX
        $.getJSON(`/user/is-available?username=${username}`, function (data) {
            if (data === false) {
                // Username không khả dụng
                Swal.fire({
                    title: 'Warning',
                    text: "Your username is not available. Please choose another one.",
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });

            } else {
                Swal.fire({
                    title: 'Success!',
                    text: "Create New Staff Successful!",
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('#frmCreate').off('submit').submit();
                    }
                });
            }

        }).fail(function () {
            // Xử lý lỗi kết nối hoặc lỗi server
            Swal.fire({
                title: 'Error',
                text: "Unable to verify username. Please try again later.",
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    });
</script>

{{/section}}
